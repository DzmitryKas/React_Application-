{"version":3,"sources":["components/todo-input/todo-input.jsx","components/todo-item/todo-item.jsx","components/todo-list/todo-list.jsx","components/todo/todo.jsx","actions/actions.jsx","components/title/title.jsx","reducers/App.js","registerServiceWorker.js","reducers/tasks.js","reducers/store.js","reducers/index.js","index.js"],"names":["ToDoInput","value","onChange","onClick","className","placeholder","defaultProps","onKeyPress","ToDoItem","text","isCompleted","removeTask","id","completeTask","ToDoList","tasksList","map","key","ToDo","state","taskText","handleInputChange","target","setState","handleButton","addTask","props","Date","getTime","this","tasks","Component","connect","type","Title","title","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","TASKS","load","namespace","length","preloadedState","filter","task","rootReducer","combineReducers","composeEnhancers","compose","store","createStore","applyMiddleware","save","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.e5213a53.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './todo-input.scss';\r\n\r\nconst ToDoInput = ({ value, onChange, onClick }) => (\r\n  <div className=\"input\">    \r\n    <input\r\n      placeholder=\" Добавить покупку\"\r\n      className=\"input__block\"\r\n      onChange={onChange}\r\n      value={value}\r\n    />\r\n    <button className=\"input__btn\" onClick={onClick}>Добавить</button>\r\n  </div>\r\n);\r\n\r\nToDoInput.propTypes = {\r\n  onChange: PropTypes.func,\r\n  onKeyPress: PropTypes.func,\r\n  value: PropTypes.string,\r\n}\r\n\r\nToDoInput.defaultProps = {\r\n  onChange: () => {},\r\n  onKeyPress: () => {},\r\n  value: '',\r\n}\r\n\r\nexport default ToDoInput;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './todo-item.scss';\r\n\r\nconst ToDoItem = ({ text, isCompleted, removeTask, id, completeTask }) => (\r\n  <li className=\"todo-item\">\r\n    <i onClick={() => completeTask(id)} className={isCompleted ? 'mark checked' : 'mark'} />\r\n    <span className={isCompleted ? 'completed text' : 'text'}>{text}</span>\r\n    <i onClick={() => removeTask(id)} className=\"close\" />\r\n  </li>\r\n);\r\n\r\nToDoItem.propTypes = {\r\n  text: PropTypes.string,\r\n  isCompleted: PropTypes.bool,\r\n  removeTask: PropTypes.func,\r\n  id: PropTypes.number,\r\n}\r\n\r\nToDoItem.defaultProps = {\r\n  text: '',\r\n  isCompleted: false,\r\n  removeTask: () => {},\r\n  id: 0,\r\n}\r\n\r\nexport default ToDoItem;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport ToDoItem from '../todo-item/todo-item';\r\n\r\nimport './todo-list.scss';\r\n\r\nconst ToDoList = ({ tasksList, removeTask, completeTask }) => (\r\n    <ul className=\"todo-list\">\r\n      {tasksList.map(({ id, text, isCompleted }) => (\r\n        <ToDoItem completeTask={completeTask} removeTask={removeTask} id={id} key={id} text={text} isCompleted={isCompleted} />\r\n      ))}\r\n    </ul>\r\n  );\r\n  \r\n  ToDoList.propTypes = {\r\n    tasksList: PropTypes.array,\r\n    removeTask: PropTypes.func,\r\n    completeTask: PropTypes.func,\r\n  }\r\n  \r\n  ToDoList.defaultProps = {\r\n    tasksList: [],\r\n    removeTask: () => {},\r\n    completeTask: () => {},\r\n  }\r\n\r\nexport default ToDoList;","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { addTask, removeTask, completeTask } from \"../../actions/actions\";\r\n\r\nimport ToDoInput from \"../../components/todo-input/todo-input\";\r\nimport ToDoList from \"../../components/todo-list/todo-list\";\r\n\r\nimport \"./todo.scss\";\r\n\r\nclass ToDo extends Component {\r\n  state = {\r\n    taskText: \"\"\r\n  };\r\n\r\n  handleInputChange = ({ target: { value } }) => {\r\n    this.setState({\r\n      taskText: value\r\n    });\r\n  };\r\n\r\n  handleButton = () => {};\r\n\r\n  addTask = () => {\r\n    const { taskText } = this.state;\r\n    const { addTask } = this.props;\r\n    addTask(new Date().getTime(), taskText, false);\r\n    this.setState({\r\n      taskText: \"\"\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { tasks, removeTask, completeTask } = this.props;\r\n\r\n    return (\r\n      <div className=\"wrapper\">\r\n        <ToDoInput\r\n          onClick={this.addTask}\r\n          onChange={this.handleInputChange}\r\n          value={this.state.taskText}\r\n        />\r\n        <ToDoList\r\n          tasksList={tasks}\r\n          completeTask={completeTask}\r\n          removeTask={removeTask}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  state => ({\r\n    tasks: state.tasks\r\n  }),\r\n  { addTask, removeTask, completeTask }\r\n)(ToDo);\r\n","export const addTask = (id, text, isCompleted) => ({\r\n    type: \"ADD_TASK\",\r\n    id,\r\n    text,\r\n    isCompleted\r\n  });\r\n  \r\n  export const removeTask = id => ({\r\n    type: \"REMOVE_TASK\",\r\n    id\r\n  });\r\n  \r\n  export const completeTask = id => ({\r\n    type: \"COMPLETE_TASK\",\r\n    id\r\n  });  \r\n","  \r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './title.scss';\r\n\r\nconst Title = ({ title }) => (\r\n  <h1 className=\"title\">{title}</h1>\r\n);\r\n\r\nTitle.propTypes = {\r\n  title: PropTypes.string,\r\n}\r\n\r\nTitle.defaultProps = {\r\n  title: 'Simple title',\r\n}\r\n\r\nexport default Title;","import React, { Fragment } from 'react';\r\n\r\nimport ToDo from '../components/todo/todo';\r\nimport Title from '../components/title/title';\r\nimport './App.scss';\r\n\r\nconst App = () => (\r\n  <Fragment>\r\n    <Title title=\"Список покупок\" />\r\n    <ToDo />\r\n  </Fragment>\r\n);\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}","import { load } from 'redux-localstorage-simple';\r\n\r\nlet TASKS = load({ namespace: 'todo-list' });\r\n\r\nif (!TASKS || !TASKS.tasks || !TASKS.tasks.length) {\r\n  TASKS = {\r\n    tasks: [\r\n      {\r\n        id: 1,\r\n        text: 'Купить туалетную бумагу',\r\n        isCompleted: true,\r\n      },\r\n      {\r\n        id: 2,\r\n        text: 'Купить гречку',\r\n        isCompleted: false,\r\n      },\r\n      {\r\n        id: 3,\r\n        text: 'Купить антисептик',\r\n        isCompleted: false,\r\n      }\r\n    ]\r\n  }\r\n} \r\n  \r\n  const tasks = (state = TASKS.tasks, { id, text, isCompleted, type }) => {\r\n    switch (type) {\r\n      case \"ADD_TASK\" :\r\n        return [\r\n          ...state, {\r\n            id,\r\n            text,\r\n            isCompleted,\r\n          }\r\n        ];\r\n      case \"REMOVE_TASK\":\r\n        return [...state].filter(task => task.id !== id);\r\n      case \"COMPLETE_TASK\":\r\n          return [...state].map(task => {\r\n            if(task.id === id) {\r\n              task.isCompleted = !task.isCompleted;\r\n            }\r\n            return task;\r\n          });\r\n      default:\r\n        return state;\r\n    }\r\n  }\r\n  \r\n  export default tasks;","import { createStore, compose, applyMiddleware } from 'redux';\r\nimport rootReducer from './index.js';\r\nimport { save } from 'redux-localstorage-simple';\r\n\r\n/* eslint-disable no-underscore-dangle */\r\nconst composeEnhancers =\r\n  process.env.NODE_ENV !== 'production' &&\r\n  typeof window === 'object' &&\r\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?\r\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({}) : compose;\r\n/* eslint-enable */\r\n\r\nconst configureStore = preloadedState => (\r\n  createStore(\r\n    rootReducer,\r\n    preloadedState,\r\n    composeEnhancers(\r\n      applyMiddleware(save({ namespace: 'todo-list' }))\r\n    ),\r\n  )\r\n);\r\n\r\nconst store = configureStore({});\r\n\r\nexport default store;","import { combineReducers } from 'redux';\r\nimport tasks from './tasks';\r\n\r\nconst rootReducer = combineReducers({ tasks });\r\n\r\nexport default rootReducer;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './reducers/App.js';\r\nimport './index.scss';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport store from './reducers/store.js';\r\n\r\nReactDOM.render((\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>\r\n), document.getElementById('root'));\r\nregisterServiceWorker();"],"sourceRoot":""}